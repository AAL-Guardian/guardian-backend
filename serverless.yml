# Welcome to serverless. Read the docs
# https://serverless.com/framework/docs/

# Serverless.yml is the configuration the CLI
# uses to deploy your code to your provider of choice

# The `service` block is the name of the service
service: guardian-backend

useDotenv: true
frameworkVersion: ^2.12.0
configValidationMode: error

custom:
  myStage: ${opt:stage, 'dev'}
  webpack:
    includeModules: true   # Node modules configuration for packaging
    packager: 'npm'   # Packager that will be used to package your external modules
  contentEncoding:
    contentCompression: 100 # Minimum body size required for compression in bytes# Targeted usage percentage
  # dynamodb:
  #   projectTable: ${self:service}-${self:provider.stage}
  #   projectTableArn: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.dynamodb.projectTable}
  #   start:
  #     port: 8000
  #     # inMemory: true
  #     dbPath: .dynamodata/
  #     migrate: true
  #     noStart: false

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'} # opt is the serverless deploy command options ( serverless deploy option value )
  region: eu-west-1
  memorySize: 1024
  timeout: 30
  profile: ${opt:profile, env:profile, 'default'}
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  deploymentBucket:
    name: serverless.jef-prof.deploys # Deployment bucket name. Default is generated by the framework and different for every project
    maxPreviousDeploymentArtifacts: 10 # On every deployment the framework prunes the bucket to remove artifacts older than this limit. The default is 5
    blockPublicAccess: true # Prevents public access via ACLs or bucket policies. Default is false
  stackTags:
    Company: Jef
    Project: Guardian
    Environment: ${self:provider.stage}
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:*
  #     Resource:
  #       - "${self:custom.dynamodb.projectTableArn}"
  #       - "${self:custom.dynamodb.projectTableArn}/index/*"

  # this is needed to connect to RDS but it breaks other AWS services
  environment:
    stage: ${self:provider.stage}
    version: 0.0.1
    # projectTable: ${self:custom.dynamodb.projectTable}
    # projectTableArn: ${self:custom.dynamodb.projectTableArn}

package:
  individually: true
  excludeDevDependencies: true

plugins:
  - serverless-webpack
  # - serverless-dynamodb-local
  - serverless-offline
  
functions:
  ${file(./serverless.functions.yml):functions}

resources:
  Resources:
    # ProjectTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: ${self:custom.dynamodb.projectTable}
    #     BillingMode: PAY_PER_REQUEST
    #     AttributeDefinitions:
    #       -
    #         AttributeName: primary
    #         AttributeType: S
    #       -
    #         AttributeName: secondary
    #         AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: primary
    #         KeyType: HASH
    #       -
    #         AttributeName: secondary
    #         KeyType: RANGE
    #     GlobalSecondaryIndexes:
    #       - IndexName: ReverseKeyIndex
    #         KeySchema:
    #           - 
    #             AttributeName: secondary
    #             KeyType: HASH
    #           - 
    #             AttributeName: primary
    #             KeyType: RANGE
    #         Projection:
    #           ProjectionType: ALL