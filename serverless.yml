# Welcome to serverless. Read the docs
# https://serverless.com/framework/docs/

# Serverless.yml is the configuration the CLI
# uses to deploy your code to your provider of choice

# The `service` block is the name of the service
service: guardian-backend

useDotenv: true
frameworkVersion: ^3

custom:
  logRetentionInDays: 60
  serverless-offline:
    AccountId: { Ref: AWS::AccountId }
  resources:
    Region: { Ref: AWS::Region }
    AccountId: { Ref: AWS::AccountId }
    audioBucket: ${self:service}-${self:provider.stage}-uploads
    schedulerTable: ${self:service}-${self:provider.stage}-scheduler
    schedulerTableArn: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.resources.schedulerTable}
    # schedulerTableArn: { Fn::GetAtt: [ "${self:custom.resources.schedulerTable}", Arn] }
    # audioBucket: { Ref: audioBucket }
    auroraDB:
      #   Name: guardiandb-${self:provider.stage}
      Name: guardian-db
      Arn:
        Fn::Join:
          - ":"
          - - arn:aws:rds
            - ${self:provider.region}
            - 278717594002
            # - ${self:custom.resources.Region}
            # - ${self:custom.resources.AccountId}
            - cluster:${self:custom.resources.auroraDB.Name}
  webpack:
    includeModules: true # Node modules configuration for packaging
    packager: "npm" # Packager that will be used to package your external modules
  s3:
    host: localhost
    directory: ./.s3-local
  contentEncoding:
    contentCompression: 100 # Minimum body size required for compression in bytes# Targeted usage percentage
  environments:
    prod:
      secretArn: arn:aws:secretsmanager:eu-west-1:278717594002:secret:prod/db_connection-OVaM67
      schema: guardian
    dev:
      secretArn: arn:aws:secretsmanager:eu-west-1:278717594002:secret:dev/db_connection-Zo919z
      schema: guardian_dev

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'} # opt is the serverless deploy command options ( serverless deploy option value )
  region: eu-west-1
  memorySize: 1024
  timeout: 30
  versionFunctions: false
  deploymentMethod: direct
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  # s3:
  #   audioBucket:
  #     name: ${self:service}-${self:provider.stage}-uploads
  deploymentBucket:
    name: serverless.jef-guardian.deploys # Deployment bucket name. Default is generated by the framework and different for every project
    maxPreviousDeploymentArtifacts: 10 # On every deployment the framework prunes the bucket to remove artifacts older than this limit. The default is 5
    blockPublicAccess: true # Prevents public access via ACLs or bucket policies. Default is false
  stackTags:
    Company: Jef
    Project: Guardian
    Environment: ${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - iot:*
          Resource:
            - "*"
        - Effect: Allow
          Action:
            - rds:*
            - rds-data:*
          Resource:
            - ${self:custom.resources.auroraDB.Arn}
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - arn:aws:secretsmanager:*:*:secret:rds-db-credentials/*
            - arn:aws:secretsmanager:eu-west-1:278717594002:secret:dev/db_connection-Zo919z
            - arn:aws:secretsmanager:eu-west-1:278717594002:secret:prod/db_connection-OVaM67
            - arn:aws:secretsmanager:eu-west-1:278717594002:secret:dev/google-transcribe-key-zf62FY
        - Effect: Allow
          Action:
            - polly:*
          Resource:
            - "*"
        - Effect: "Allow"
          Action:
            - "s3:*"
          Resource: "arn:aws:s3:::${self:custom.resources.audioBucket}/*"
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - "${self:custom.resources.schedulerTableArn}"
            - "${self:custom.resources.schedulerTableArn}/index/*"
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource:
            - "*"
        - Effect: Allow
          Action:
            - events:DescribeRule
            - events:PutRule
            - events:ListRules
          Resource:
            - "*"
  # this is needed to connect to RDS but it breaks other AWS services
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    NODE_OPTIONS: --enable-source-maps
    stackName: ${self:service}
    stage: ${self:provider.stage}
    version: 0.0.1
    auroraSchema: ${self:custom.environments.${self:provider.stage}.schema, self:custom.environments.dev.schema}
    auroraDBName: ${self:custom.resources.auroraDB.Name}
    auroraDBArn: ${self:custom.resources.auroraDB.Arn}
    secretArn: ${self:custom.environments.${self:provider.stage}.secretArn, self:custom.environments.dev.secretArn}
    bucketName: ${self:custom.resources.audioBucket}
    dynamodbScheduler: ${self:service}-${self:provider.stage}-scheduler

package:
  individually: true
  excludeDevDependencies: true

plugins:
  - serverless-plugin-log-retention
  - serverless-iam-roles-per-function
  - serverless-s3-local
  - serverless-webpack
  - serverless-offline

functions:
  - ${file(./serverless.api-functions.yml):functions}
  - ${file(./serverless.listener-functions.yml):functions}
  - ${file(./serverless.test-functions.yml):functions}

resources:
  Resources:
    audioBucket:
      Type: AWS::S3::Bucket
      # DeletionPolicy: Retain
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-uploads
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - HEAD
                - PUT
                - POST
                - DELETE
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
    iotAuthorizer:
      Type: AWS::IoT::Authorizer
      DependsOn: [IotTokenAuthorizerLambdaFunction]
      Properties:
        AuthorizerFunctionArn: { "Fn::GetAtt": [IotTokenAuthorizerLambdaFunction, "Arn"] }
        AuthorizerName: GuardianIotAuthorizer-${self:provider.stage}
        SigningDisabled: true
        Status: ACTIVE
    iotAuthorizerPermission:
      DependsOn: [IotTokenAuthorizerLambdaFunction, iotAuthorizer]
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: { "Fn::GetAtt": [IotTokenAuthorizerLambdaFunction, "Arn"] }
        Action: lambda:InvokeFunction
        Principal: iot.amazonaws.com
        SourceArn: { "Fn::GetAtt": [iotAuthorizer, "Arn"] }

    # schedulerTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: ${self:service}-${self:provider.stage}-scheduler
    #     BillingMode: PAY_PER_REQUEST
    #     TimeToLiveSpecification:
    #         AttributeName: time
    #         Enabled: true
    #     AttributeDefinitions:
    #       -
    #         AttributeName: clientId
    #         AttributeType: S
    #       -
    #         AttributeName: eventId
    #         AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: clientId
    #         KeyType: HASH
    #       -
    #         AttributeName: eventId
    #         KeyType: RANGE
    #     StreamSpecification:
    #       StreamViewType: OLD_IMAGE
