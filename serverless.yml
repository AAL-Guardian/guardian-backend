# Welcome to serverless. Read the docs
# https://serverless.com/framework/docs/

# Serverless.yml is the configuration the CLI
# uses to deploy your code to your provider of choice

# The `service` block is the name of the service
service: guardian-backend

useDotenv: true
frameworkVersion: ^2.12.0
configValidationMode: error

custom:
  serverless-offline:
    AccountId: { Ref: AWS::AccountId }
  resources:
    Region: { Ref: AWS::Region }
    AccountId: { Ref: AWS::AccountId }
    auroraDB:
    #   Name: guardiandb-${self:provider.stage}
      Name: guardian-db
      Arn:
        Fn::Join:
          - ':'
          - - arn:aws:rds
            - ${self:provider.region}
            - 278717594002
            # - ${self:custom.resources.Region}
            # - ${self:custom.resources.AccountId}
            - cluster:${self:custom.resources.auroraDB.Name}
  webpack:
    includeModules: true   # Node modules configuration for packaging
    packager: 'npm'   # Packager that will be used to package your external modules
  contentEncoding:
    contentCompression: 100 # Minimum body size required for compression in bytes# Targeted usage percentage
  environments:
    prod:
      secretArn: arn:aws:secretsmanager:eu-west-1:278717594002:secret:rds-db-credentials/cluster-Y3VSICFR3ZA5XDXBW6TDARMYCY/admin-rmDDNd
      schema: guardian
    dev:
      secretArn: arn:aws:secretsmanager:eu-west-1:278717594002:secret:dev/db_connection-Zo919z
      schema: guardian_dev

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'} # opt is the serverless deploy command options ( serverless deploy option value )
  region: eu-west-1
  memorySize: 1024
  timeout: 30
  profile: ${opt:profile, env:profile, 'default'}
  lambdaHashingVersion: "20201221"
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  deploymentBucket:
    name: serverless.jef-guardian.deploys # Deployment bucket name. Default is generated by the framework and different for every project
    maxPreviousDeploymentArtifacts: 10 # On every deployment the framework prunes the bucket to remove artifacts older than this limit. The default is 5
    blockPublicAccess: true # Prevents public access via ACLs or bucket policies. Default is false
  stackTags:
    Company: Jef
    Project: Guardian
    Environment: ${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - iot:*
          Resource:
            - "*"
        - Effect: Allow
          Action:
            - rds:*
            - rds-data:*
          Resource:
            - ${self:custom.resources.auroraDB.Arn}
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - arn:aws:secretsmanager:*:*:secret:rds-db-credentials/*
            - arn:aws:secretsmanager:eu-west-1:278717594002:secret:dev/db_connection-Zo919z
        - Effect: Allow
          Action:
            - polly:*
          Resource:
            - "*"

  # this is needed to connect to RDS but it breaks other AWS services
  environment:
    stage: ${self:provider.stage}
    version: 0.0.1
    auroraSchema: ${self:custom.environments.${self:provider.stage}.schema, self:custom.environments.dev.schema}
    auroraDBName: ${self:custom.resources.auroraDB.Name}
    auroraDBArn: ${self:custom.resources.auroraDB.Arn}
    secretArn: ${self:custom.environments.${self:provider.stage}.secretArn, self:custom.environments.dev.secretArn}

package:
  individually: true
  excludeDevDependencies: true

plugins:
  - serverless-webpack
  - serverless-offline
  
functions:
  ${file(./serverless.functions.yml):functions}

resources:
  Resources:
    # auroraDB: 
    #   Type: AWS::RDS::DBCluster
    #   Properties:
    #     DBClusterIdentifier: ${self:service}-${self:provider.stage}-db
    #     MasterUsername: ${env:masterDBAdmin}
    #     MasterUserPassword: ${env:masterDBPassword}
    #     Engine: aurora-mysql
    #     EngineMode: serverless
    #     EnableHttpEndpoint: true
    #     ScalingConfiguration:
    #       AutoPause: true
    #       MaxCapacity: 4
    #       MinCapacity: 1
    #       SecondsUntilAutoPause: 600